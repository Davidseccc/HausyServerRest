swagger: '2.0'
info:
  version: 1.0.0
  title: Hausy Server Rest API v1.0
  description: Hausy Base API
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /action:
    get:
      tags:
      - Action
      description: get all available actions
      operationId: getAllActions
      responses:
        200:
          description: Get list of Actions
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Action'
              example: 
              
  /action/get/{id}:
    get:
      tags:
        - Action
      summary: Find action by action ID
      description: Get action specified by Id. Return action with selected id.
      operationId: FindById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of action which needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Subsystem'
        "404":
          description: Action not found
  
  /attendance/{from}/{to}:
    get:
      tags:
        - Attendance
      summary: get last data from channel
      description: Get channel data for a last hour from a specific channel
      operationId: get
      produces:
        - application/json
      parameters:
        - in: path
          name: from
          description: start datetime timestamp
          required: true
          type: number
        - in: path
          name: to
          description: end datetime timestamp
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/ChannelData'

        "404":
          description: Not found 
  
  /attendance/{from}/{to}/{channel}:
    get:
      tags:
        - Attendance
      summary: get last data from channel
      description: Get channel data for a last hour from a specific channel
      operationId: getValuesToChannel
      produces:
        - application/json
      parameters:
        - in: path
          name: from
          description: start datetime timestamp
          required: true
          type: number
        - in: path
          name: to
          description: end datetime timestamp
          required: true
          type: string
        - in: path
          name: channel
          description: channel channel name
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/ChannelData'

        "404":
          description: Not found 
  
  /channel-data:
    post:
      consumes: 
        - application/x-www-form-urlencoded
      produces:
        - application/json       
      tags:
      - ChannelData
      operationId: setChannelData
      parameters:
        - in: formData
          name: day
          description: ID of pet that needs to be updated
          required: true
          type: number
        - in: formData
          name: month
          description: Updated name of the pet
          required: true
          type: number
        - in: formData
          name: year
          description: Updated status of the pet
          required: true
          type: number
        - in: formData
          name: hour
          description: Updated status of the pet
          required: true
          type: string
        - in: formData
          name: number
          description: Updated status of the pet
          required: true
          type: number
      responses:
        200:
          description: successfully registered device or error response             
 
  /channel-data/getLastHour/{channel}:
    get:
      tags:
        - ChannelData
      summary: get last data from channel
      description: Get channel data for a last hour from a specific channel
      operationId: getLastHour
      produces:
        - application/csv
      parameters:
        - in: path
          name: channel
          description: channel name where data will be fetched
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          
        "404":
          description: NodeType not found
          
  /channel-data/get/{from}/{to}/{channel}:
    get:
      tags:
        - ChannelData
      summary: get last data from channel
      description: Get channel data for a last hour from a specific channel
      operationId: getValuesInRangeWithChannel
      produces:
        - application/csv
      parameters:
        - in: path
          name: from
          description: start datetime timestamp
          required: true
          type: number
        - in: path
          name: to
          description: end datetime timestamp
          required: true
          type: string
        - in: path
          name: channel
          description: channel name where data will be fetched
          required: true
          type: string
      responses:
        "200":
          description: Successful operation

        "404":
          description: Not found
        
  /channel-data/getAvg/{from}/{to}/{channel}/{interval}:
    get:
      tags:
        - ChannelData
      summary: get last data from channel
      description: Get channel data for a last hour from a specific channel
      operationId: getAvg
      produces:
        - application/json
      parameters:
        - in: path
          name: from
          description: start datetime timestamp
          required: true
          type: number
        - in: path
          name: to
          description: end datetime timestamp
          required: true
          type: string
        - in: path
          name: channel
          description: channel name where data will be fetched
          required: true
          type: string
        - in: path
          name: interval
          description: channel name where data will be fetched
          required: true
          type: number
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/Node'

        "404":
          description: Not found  
          
  /channel:
    get:
      tags:
      - Channel
      description: get all available Channels
      operationId: getAllChannels
      responses:
        200:
          description: Get list of Channels
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Channel'
              example: 
    
  /channel/get/{id}:
    get:
      tags:
        - Channel
      summary: get last data from channel
      description: Get channel data for a last hour from a specific channel
      operationId: getChannel
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: id of channel needs to be fetched
          required: true
          type: number
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/Channel'
        "404":
          description: Channel not found 

  /condition:
    get:
      tags:
      - Condition
      description: get all available conditions
      operationId: getAllConditions
      responses:
        200:
          description: Get list of Conditions
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/RuleCondition'
              example: 
    
  /condition/get/{id}:
    get:
      tags:
        - Attendance
      summary: get last data from channel
      description: Get channel data for a last hour from a specific channel
      operationId: findById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: id of Condition to be fetched
          required: true
          type: number
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/RuleCondition'
        "404":
          description: Condition not found 
          
  /configuration/get:
    get:
      tags:
      - Configuration
      description: get all available Nodes
      operationId: getConfig

      responses:
        200:
          description: Find all Nodes
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Node'
              example:
              
  /configuration/set:
    post:
      tags:
      - Configuration
      description: get all available Nodes
      operationId: setConfig
      consumes:
        - application/xml
      produces:
        - application/json
      responses:
        200:
          description: Find all Nodes
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Node'
              example:
              
  /device:
    get:
      tags:
      - Device
      description: get all available devices
      operationId: getAllDevices
      responses:
        200:
          description: Get list of Devices
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Device'
              example: 
    
  /device/get/{id}:
    get:
      tags:
        - Device
      summary: get device by specified ID
      description: Find Device by id ID of Device that needs to be fetched
      operationId: findDeviceById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: id of Device to be fetched
          required: true
          type: number
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/Device'
        "404":
          description: Device not found

  /group-rule:
    get:
      tags:
      - GroupRule
      description: get all available GroupRules
      operationId: getAllGrouples
      responses:
        200:
          description: Get list of GroupRules
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/GroupRule'
              example:
    
  /group-rule/get/{id}:
    get:
      tags:
        - GroupRule
      summary: get GroupRule by specified ID
      description: Find GroupRule by id ID that needs to be fetched
      operationId: findGroupRuleById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: id of GroupRule to be fetched
          required: true
          type: number
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/GroupRule'
        "404":
          description: GroupRule not found
  /hello/{param}:
    get:
      tags:
        - Hello
      summary: get GroupRule by specified ID
      description: Find GroupRule by id ID that needs to be fetched
      operationId: sayHello
      produces:
        - application/json
      parameters:
        - in: path
          name: param
          description: name to be used in message
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: ''
  
  /node:
    get:
      tags:
      - Node
      description: get all available Nodes
      operationId: getAllNodes
      responses:
        200:
          description: Find all Nodes
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Node'
              example: 
  
  /node/get/{id}:
    get:
      tags:
        - Node
      summary: Find Node by specified id
      description: Find Node by selected id
      operationId: getNodeByID
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of Node that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Node'
        "404":
          description: NodeType not found
  
  /nodetype:
    get:
      tags:
      - NodeType
      description: get all available NodeTypes
      operationId: getAll
      responses:
        200:
          description: Find all NodeTypes
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Nodetype'
              example: 

  /nodetype/get/{id}:
    get:
      tags:
        - NodeType
      summary: Find NodeType by specified id
      description: Find NodeType by selected id
      operationId: getNodeTypeByID
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of subsystem that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Nodetype'
        "404":
          description: NodeType not found
          
  /nodetype/getByAccessType/{accessType}:
    get:
      tags:
        - NodeType
      summary: Find NodeType by specified accessType
      description: Find NodeTypes by AccessType (byte) which is Specified in AccessTypeFB.java
      operationId: getByAccessType
      produces:
        - application/json
      parameters:
        - in: path
          name: accessType
          description: AccesType R(0), W(1), RW(2)
          required: true
          type: integer
          format: int4
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Nodetype'
        "404":
          description: NodeType not found
  
  /rule:
    get:
      tags:
      - Rule
      description: get all available Rules
      operationId: getRules
      responses:
        200:
          description: All the Rules
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Rule'
              example: 
    post:
      tags:
      - Rule
      operationId: addRule
      parameters:
      - in: body
        name: Rule
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successfully registered Rule or error response
          
  /rule/get/{id}:
    get:
      tags:
        - Rule
      summary: Find rule by rule ID
      description: Get rule specified by Id. Return rule with selected id.
      operationId: getById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of rule that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Rule'
        "404":
          description: Rule not found
          
  /subsystem:
    get:
      tags:
      - Subsystem
      description: get all available Subsystems
      operationId: getSubsystems
      responses:
        200:
          description: All the devices
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/Subsystem'
              example: 
    post:
      tags:
      - Subsystem
      operationId: addSubsystem
      parameters:
      - in: body
        name: Subsystem
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successfully registered device or error response
          
  /subsystem/get/{id}:
    get:
      tags:
        - Subsystem
      summary: Find subsystem by subsystem ID
      description: Get subsystem specified by Id. Return subsystem with selected id.
      operationId: getSubsystemById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: ID of pet that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Subsystem'
        "404":
          description: Subsystem not found

 
  
definitions:
  Nodetype:
    type: object
    properties:
      id: 
        type: integer
        format: int8
      accessType:
        type: integer
        format: int8
      dataCount:
        type: integer
        format: int8 
      dataRange:
        type: integer
        format: int8
      latency:
        type: integer
        format: int8
      minDelay:
        type: integer
        format: int8
  
  Subsystem:
    type: object
    properties:
      id:
        type: integer
        format: int32
  
  Node:
    type: object
    properties:
      nodeId:
        type: integer
        format: int32
      channelCount:
        type: integer
        format: int8
      localId: 
        type: integer
        format: int8
      macAddress:
        type: string
      nodeType:
        $ref: '#/definitions/Nodetype'
      subystem:
        $ref: '#/definitions/Subsystem'
  
  Channel:
    type: object
    properties: 
      channeNumber:
        type: string
      channelNumber:
        type: integer
        format: int8
      localID:
        type: string
      node:
        $ref: '#/definitions/Node'
  
  Device:
    type: object
    properties:
      deviceid:
        type: integer
        format: int32
      devicename:
        type: string
      channel:
        $ref: '#/definitions/Device'
  
  RuleCondition:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      operators:
        type: string
      conditionValues:
        type: integer
        format: int32
      device: 
        $ref: '#/definitions/Device'
      rule: 
        $ref: '#/definitions/Rule'
  
  GroupRule:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      active: 
        type: boolean
  
  Rule:
    type: object
    properties:
      id: 
        type: integer
        format: int32
      name:
        type: string
      originalExpression:
        type: string
      active: 
        type: boolean
      groupRule:
        $ref: '#/definitions/GroupRule'
  
  Action:
    type: object
    properties:
      name: 
        type: string
      actionValues: 
        type: integer
        format: int64
      device:
        $ref: '#/definitions/Device'
      rule: 
        $ref: '#/definitions/Rule'
        
  ChannelData:
    type: object
    properties:
      id:
        type: integer
        format: int32
      data:
        type: array
        items:
          type: number
      timestamp:
        type: number
  
  
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
# basePath: /Davidseccc/hauysAPI/1.0.0
# Added by API Auto Mocking Plugin
basePath: /rest/v1